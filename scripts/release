#!/usr/bin/env bash

# improved safety
set -o errexit -o pipefail -o noclobber -o nounset

#
# handle options:
#

# ensure getopt support is present
getopt --test > /dev/null && true
if [[ $? -ne 4 ]]; then
    printf '`getopt --test` failed, it might not be available in this environment\n'
    exit 1
fi

# store original_cmd
original_cmd="$0 $@"
# set option defaults
dry=false
stage=false

# parse opts
help_msg="\
Usage: $0 [OPTIONS]

OPTIONS:
  -d, --dry-run                execute as dry run, meaning all output will be
                               given, but release branch will deleted instead
                               merged & then main pushed to remote
  -f, --first-release          do not bump version number, but create tag
                               matching it & commit instead
  -p, --prerelease [PREFIX]    cut release as prerelease, optionally using the
                               given prerelease prefix
  -r, --release-as <TYPE>      specify type of release as 'major', 'minor', or
                               w/ exact version number given as format matching
  -s, --stage-only [BRANCH]    create release on staging branch, but do not
                               merge to main & push for release
"
longopts=dry-run,release-as:,prerelease::,help,stage-only
options=dr:phs
release_args=()

if parsed="$(getopt --options=$options --longoptions=$longopts --name "$0" -- "$@")"; then
    eval set -- "$parsed"
    while true; do
        case "$1" in
            -d|--dry-run)
                dry=true
                shift
                ;;
            -f|--first-release)
                release_args+=("$1")
                shift
                ;;
            -h|--help)
                printf "$help_msg\n"
                exit 0
                ;;
            --prerelease)
                release_args+=("$1")
                if [ ${#@} -gt 1 ]; then
                    release_args+=("$2")
                    shift 2
                else
                    shift
                fi
                ;;
            -p)
                release_args+=("--prerelease")
                shift
                ;;
            -r|--release-as)
                release_args+=("$1")
                release_args+=("$2")
                shift 2
                ;;
            -s|--stage-only)
                stage=true
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                printf "Options error\n"
                printf "$help_msg\n"
                exit 3
                ;;
        esac
    done
else # handle invalid options
    printf "$help_msg\n"
    exit $?
fi

printf "\
releasing with options as:
  --dry-run: $dry
  --stage-only: $stage
  -- ${release_args[@]}\n"

# init tag as empty until a release is created
tag=""
# define branch used for staging releases
branch="chore/release-staging"

#
# exit_failure
#
# quit with a failure exit code
exit_failure () {
    printf "quitting release\n"
    exit 1
}

#
# cleanup
#
# goes back to main & deletes the no longer necessary staging branch
cleanup () {
    git checkout main
    git branch -D $branch
}

#
# failure_cleanup
#
# does all normal cleanup steps, but also deletes the tag for the failed release
failure_cleanup () {
    cleanup
    if [ -n "$tag" ]; then
        git tag -d $tag
    fi
}

#
# exit_cleanup
#
# helper fn to attempt graceful exit on program failure
exit_cleanup () {
    printf "attempting to quit gracefully...\n"
    if ! failure_cleanup; then
        printf "graceful quit failed, bailing\n"
    else
        printf "graceful shutdown complete\n"
    fi
    exit_failure
}

#
# try <command> [on_failure]
#
# helper fn to try a failiable action & optionally execute a command on fail
#
# command:    a command to try executing
# on_failure: optional command to run on failure;
#             if not given, program will attempt to exit gracefully
try () {
    local catch=${2:-"exit_cleanup"} # use 2nd arg on error, or default to exit helper
    if ! $1; then
        printf "'$1' failed\n"
        $catch
    fi
}

#
# create
#
# try to create a release & prepare the release changelog
create () {
    git checkout -b $branch
    cmd="npx commit-and-tag-version"
    if [ ${#release_args[@]} -gt 0 ]; then
        cmd+=" ${release_args[@]}"
    fi
    printf "cutting release with:\n"
    printf "$cmd\n"
    try "$cmd"
    # update global tag value from newly updated package.json
    tag="v$(node -p "require('./package.json').version")"
    try "node scripts/getChanges.js"
}

#
# push
#
# merge to main & push release tag
push () {
    try "git checkout main"
    try "git merge $branch"
    try "git push --follow-tags origin main"
}

create

if [ -s BODY.md ]; then
    printf "user facing changes found:\n"
    cat BODY.md
    printf "\n\n"

    if [ "$dry" == "true" ]; then
        failure_cleanup
        printf "dry run complete, rerun '$original_cmd' without --dry-run to execute\n"
        exit 0
    elif [ "$stage" == "true" ]; then
        printf "\
Release $tag staged on $branch. To complete release, inspect staged release as needed, then do:
    git checkout main
    git merge $branch
    git push origin
    git branch -d $branch
    rm BODY.md\n"
        exit 0
    else
        printf "pushing tag for release\n"
        # FIXME: change back to push and remove failure_cleanup
        # push
        failure_cleanup
    fi
else
    printf "no user facing changes found, deleting tag\n"
    failure_cleanup
fi

cleanup
